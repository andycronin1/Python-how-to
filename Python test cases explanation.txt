--------------------------------------------------------
Python test cases
--------------------------------------------------------

A test case expresses requirements for a program, in a way that can be checked automatically. Specifically, a test asserts something about the state of the program at a particular point in its execution.

We have previously suggested that it’s a good idea to first write down comments about what your code is supposed to do, before actually writing the code. It is an even better idea to write down some test cases before writing a program.

There are several reasons why it’s a good habit to write test cases.

Before we write code, we have in mind what it should do, but those thoughts may be a little vague. Writing down test cases forces us to be more concrete about what should happen.

As we write the code, the test cases can provide automated feedback. You’ve actually been the beneficiary of such automated feedback via test cases throughout this book in some of the activecode windows and almost all of the exercises. We wrote the code for those test cases but kept it hidden, so as not to confuse you and also to avoid giving away the answers.
You can get some of the same benefit from writing your own test cases.
In larger software projects, the set of test cases can be run every time a change is made to the code base. Unit tests check that small bits of code are correctly implemented. Functional tests check that larger chunks of code work correctly. 
Running the tests can help to identify situations where a change in code in one place breaks the correct operation of some other code. 
We won’t see that advantage of test cases in this textbook, but keep in mind that this introduction to test cases is setting the stage for an essential software engineering practice if you are participating in a larger software development project.

Now it’s time to learn how to write code for test cases.

Python provides a statement called assert.

Following the word assert there will be a python expression.

If that expression evaluates to the Boolean False, then the interpreter will raise a runtime error.

If the expression evaluates to True, then nothing happens and the execution goes on to the next line of code.

Why would you ever want to write a line of code that can never compute anything useful for you, but sometimes causes a runtime error? For all the reasons we described above about the value of automated tests. 
You want a test that will alert that you that some condition you assumed was true is not in fact true. 
It’s much better to be alerted to that fact right away than to have some unexpected result much later in your program execution, which you will have trouble tracing to the place where you had an error in your code.

Why doesn’t assert print out something saying that the test passed? The reason is that you don’t want to clutter up your output window with the results of automated tests that pass. 
You just want to know when one of your tests fails. In larger projects, other testing harnesses are used instead of assert, such as the python unittest module. Those provide some output summarizing tests that have passed as well as those that failed. 
In this textbook, we will just use simple assert statements for automated tests.

To write a test, we must know what we expect some value to be at a particular point in the program’s execution. 
In the rest of the chapter, we’ll see some examples of assert statements and ideas for what kinds of assertions one might want to add in one’s programs.

------------------------------------------------------------------
Testing For loops 
------------------------------------------------------------------

With a for loop, the edge cases might include iterating over an empty list or string, or iterating over a list with different kinds of contents.

For example, suppose we have a code snippet that is supposed to accumulate the sum of all the numbers in a list, lst, whose value was set sometime before this code snippet is run. 
If you’ve already learned how to define functions, you can imagine this code snippet inside a function definition.

When lst is [1, 5, 8], the value at the end should be 14.

But what about when lst is an empty list? Maybe we want to assert that the value should be 0, in which case our current accumulation works fine. 
But suppose we wanted it to be some other value, perhaps the special python value None. 
By writing an assert statement, we can be alerted that our code doesn’t produce the answer we wanted…

-------------------------------------------------------------------
Test cases for functions
-------------------------------------------------------------------

It is a good idea to write one or more test cases for each function that you define.

A function defines an operation that can be performed. If the function takes one or more parameters, it is supposed to work properly on a variety of possible inputs. 
Each test case will check whether the function works properly on one set of possible inputs.

A useful function will do some combination of three things, given its input parameters:

Return a value. For these, you will write return value tests.

Modify the contents of some mutable object, like a list or dictionary. For these you will write side effect tests.

Print something or write something to a file. Tests of whether a function generates the right printed output are beyond the scope of this testing framework; you won’t write these tests.

***Return Value Tests*****

Testing whether a function returns the correct value is the easiest test case to define. 
You simply check whether the result of invoking the function on a particular input produces the particular output that you expect. 
If f is your function, and you think that it should transform inputs x and y into output z, then you could write a test as assert f(x, y) == z. Or, to give a more concrete example, if you have a function square, you could have a test case assert square(3) ==  9. 
Call this a return value test.

Because each test checks whether a function works properly on specific inputs, the test cases will never be complete: in principle, a function might work properly on all the inputs that are tested in the test cases, but still not work properly on some other inputs. 
That’s where the art of defining test cases comes in: you try to find specific inputs that are representative of all the important kinds of inputs that might ever be passed to the function.

The first test case that you define for a function should be an “easy” case, one that is prototypical of the kinds of inputs the function is supposed to handle. Additional test cases should handle “extreme” or unusual inputs, sometimes called edge cases. 
For example, if you are defining the “square” function, the first, easy case, might be an input like 3. Additional extreme or unusual inputs around which you create test cases might be a negative number, 0, and a floating point number.

One way to think about how to generate edge cases is to think in terms of equivalence classes of the different kinds of inputs the function might get. 
For example, the input to the square function could be either positive or negative. We then choose an input from each of these classes. 
It is important to have at least one test for each equivalence class of inputs.

Semantic errors are often caused by improperly handling the boundaries between equivalence classes. The boundary for this problem is zero. It is important to have a test at each boundary.

Another way to think about edge cases is to imagine things that could go wrong in the implementation. For example, in the square function we might mistakenly use addition instead of multiplication. 
Thus, we shouldn’t rely on a test that uses 2 as input, but we might be fooled into thinking it was working when it produced an output of 4, when it was really doubling rather than squaring.

Try adding one or two more test cases for the square function in the code below, based on the suggestions for edge cases.

****Side Effect Tests****

To test whether a function makes correct changes to a mutable object, you will need more than one line of code. 
You will first set the mutable object to some value, then run the function, then check whether the object has the expected value. 
Call this a side effect test because you are checking to see whether the function invocation has had the correct side effect on the mutable object.

An example follows, testing the update_counts function (which is deliberately implemented incorrectly…). 
This function takes a string called letters and updates the counts in counts_diction that are associated with each character in the string. 
To do a side effect test, we first create a dictionary with initial counts for some letters. Then we invoke the function. 
Then we test that the dictionary has the correct counts for some letters (those correct counts are computed manually when we write the test. 
We have to know what the correct answer should be in order to write a test). You can think of it like writing a small exam for your code – we would not give you an exam without knowing the answers ourselves.